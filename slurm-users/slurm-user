#!/bin/bash

##Standard definitions
 ### Colours - only used for FINAL_OUTPUT
 NORMAL="\033[1;0m"  # Normal output colours
 BLUE="\033[1;34m"   # Users using greater than an arbitary number of cores!
 YELLOW="\033[1;33m" # Flags users with jobs pending but no runners 
 GREEN="\033[1;36m"  # Flags users who are currently actively limited (i.e. limit enforced and jobs pending)

 ### Arbitary numbers
 HIGHCORE=3000

## Prep header for output - fixed cols just to make life easier!
 HEADER_OUTPUT=$( echo "Username JobsRun NodeRun CoreRun JobsPend NodePend CorePend Limits Queue" | \
  awk -v NORMAL=$NORMAL '{ printf "%s%-8s, %s, %s, %s, %s, %s, %s, %s, %s %s\n", NORMAL, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NORMAL }' )

## QUEUE_OUT gets initial squeue output - lists users and which nodes they have jobs running on
 QUEUE_OUT=$( squeue -h -t R | awk '{ print $4,$NF }' | awk '{ USER=$1 ; HOSTS=$2 ; HOST_LIST[USER]=HOSTS","HOST_LIST[USER] } END { for (i in HOST_LIST) print i,HOST_LIST[i] }' | sort )

## Based on the QUEUE_OUT, RUN_NODES lists the number of nodes each user is running on
 RUN_NODES=$( while read i; do
  echo "$i" | awk '{ HOST_IS="" ; get_hosts = "scontrol show hostname "$2 "| sort -u | wc -l" ; get_hosts | getline HOST_IS ; print $1, HOST_IS }' | sort
 done <<< "$QUEUE_OUT")

## Get limit details from sacctmgr ##
 LIMITS=$( sacctmgr -n -r show assoc format=User,MaxJobs,MaxSubmitJobs | awk '$2 >= 0 || $3 >= 0' | uniq | sort )

## Get specific information out of squeue
# Grabs which queue(s) are being used - hard coded are returned as T so a combined output can be prited (JOBP_ variables)
# Counts jobs and cores being run, jobs, nodes and cores pending (JOBC_R, CORE_R, JOBC_P, NODE_P, CORE_P)
# Flags if any pending jobs are arrays (ARRAY)
 SQUEUE_OUT=$( squeue -h -o "%u %D %C %t %N %K %P" |   awk '{ USER=$1 ; TOTAL[USER]=$1 ; \
   if ( $NF=="compute" ) { JOBP_C[USER]="T" } ; \
   if ( $NF=="highmem" ) { JOBP_H[USER]="T" } ; \
   if ( $NF=="gpu" ) { JOBP_G[USER]="T"  } ; \
   if ( $NF=="gpu05" ) { JOBP_V[USER]="T" } ; \
   if ( $4 ~/R/ ) { JOBC_R[USER]+=1 ; CORE_R[USER]+=$3 ; } ; \
   if ( $4 ~/PD/ ) { JOBC_P[USER]+=1 ; NODE_P[USER]+=$2 ; CORE_P[USER]+=$3 ; if ($NF ~/[0-9]/) ARRAY[USER]=1 }} \
  END { for (i in TOTAL) { \
   if ( JOBP_C[i]=="T" ) { JOBP_CP="C" } else { JOBP_CP="." } ; \
   if ( JOBP_H[i]=="T" ) { JOBP_HP="H" } else { JOBP_HP="." } ; \
   if ( JOBP_G[i]=="T" ) { JOBP_GP="G" } else { JOBP_GP="." } ; \
   if ( JOBP_V[i]=="T" ) { JOBP_VP="V" } else { JOBP_VP="." } ; \
   if ( ARRAY[i] == 0 ) { printf "%s, %d, %d, %d, %d, %d, %s%s%s%s \n", i,JOBC_R[i],CORE_R[i],JOBC_P[i],NODE_P[i],CORE_P[i],JOBP_CP,JOBP_HP,JOBP_GP,JOBP_VP } \
   else printf "%s, %d, %d, %d*, %d*, %d*, %s%s%s%s \n", i,JOBC_R[i],CORE_R[i],JOBC_P[i],NODE_P[i],CORE_P[i],JOBP_CP,JOBP_HP,JOBP_GP,JOBP_VP  }}' | sort )

## Combines the SQUEUE_OUT output of job info by user with node output by user for full information
 JOIN_NODES=$( join -e0 -a1 <( echo "$SQUEUE_OUT" | sed 's/,//g' ) <( echo "$RUN_NODES" ) -o "1.1 1.2 2.2 1.3 1.4 1.5 1.6 1.7" )

## Combines tghe JOIN_NODES (all squeue job and node info) with and limit info from sacctmgr
 JOIN_OUT=$( join -a1 <( echo "$JOIN_NODES" | sed 's/,//g') <( echo "$LIMITS" ) | awk '{ printf "%s %s %s %s %s %s %s %s %s\n", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10 }' )

## Put together final outputs
 FINAL_OUTPUT=$( echo "$JOIN_OUT" | \
 awk -v NORMAL=$NORMAL -v BLUE=$BLUE -v YELLOW=$YELLOW -v GREEN=$GREEN -v HIGHCORE=$HIGHCORE '{ 
       if ( $2 == 0 )            { printf "%s%-8s, %s, %s, %s, %s, %s, %s, %s, %s %s\n", YELLOW, $1, $2, $3, $4, $5, $6, $7, $9, $8, NORMAL }
  else if ( $2 == $8 && $5 >= 1) { printf "%s%-8s, %s, %s, %s, %s, %s, %s, %s, %s %s\n", GREEN,  $1, $2, $3, $4, $5, $6, $7, $9, $8, NORMAL }
  else if ( $4 > HIGHCORE )      { printf "%s%-8s, %s, %s, %s, %s, %s, %s, %s, %s %s\n", BLUE,   $1, $2, $3, $4, $5, $6, $7, $9, $8, NORMAL }
  else                           { printf "%s%-8s, %s, %s, %s, %s, %s, %s, %s, %s %s\n", NORMAL, $1, $2, $3, $4, $5, $6, $7, $9, $8, NORMAL }
 }' )

## Final nice print
column -t -s"," <( echo "${HEADER_OUTPUT}" ) <( echo "${FINAL_OUTPUT}" )



